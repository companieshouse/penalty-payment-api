// Code generated by MockGen. DO NOT EDIT.
// Source: common/mongo_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/companieshouse/penalty-payment-api/common"
	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockMongoCollectionInterface is a mock of MongoCollectionInterface interface.
type MockMongoCollectionInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoCollectionInterfaceMockRecorder
}

// MockMongoCollectionInterfaceMockRecorder is the mock recorder for MockMongoCollectionInterface.
type MockMongoCollectionInterfaceMockRecorder struct {
	mock *MockMongoCollectionInterface
}

// NewMockMongoCollectionInterface creates a new mock instance.
func NewMockMongoCollectionInterface(ctrl *gomock.Controller) *MockMongoCollectionInterface {
	mock := &MockMongoCollectionInterface{ctrl: ctrl}
	mock.recorder = &MockMongoCollectionInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoCollectionInterface) EXPECT() *MockMongoCollectionInterfaceMockRecorder {
	return m.recorder
}

// DeleteOne mocks base method.
func (m *MockMongoCollectionInterface) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteOne", varargs...)
	ret0, _ := ret[0].(*mongo.DeleteResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteOne indicates an expected call of DeleteOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) DeleteOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).DeleteOne), varargs...)
}

// FindOne mocks base method.
func (m *MockMongoCollectionInterface) FindOne(ctx context.Context, filter interface{}, opts ...*options.FindOneOptions) *mongo.SingleResult {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindOne", varargs...)
	ret0, _ := ret[0].(*mongo.SingleResult)
	return ret0
}

// FindOne indicates an expected call of FindOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) FindOne(ctx, filter interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).FindOne), varargs...)
}

// InsertOne mocks base method.
func (m *MockMongoCollectionInterface) InsertOne(ctx context.Context, document interface{}, opts ...*options.InsertOneOptions) (*mongo.InsertOneResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, document}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InsertOne", varargs...)
	ret0, _ := ret[0].(*mongo.InsertOneResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertOne indicates an expected call of InsertOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) InsertOne(ctx, document interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, document}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).InsertOne), varargs...)
}

// UpdateOne mocks base method.
func (m *MockMongoCollectionInterface) UpdateOne(ctx context.Context, filter, update interface{}, opts ...*options.UpdateOptions) (*mongo.UpdateResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, filter, update}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateOne", varargs...)
	ret0, _ := ret[0].(*mongo.UpdateResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOne indicates an expected call of UpdateOne.
func (mr *MockMongoCollectionInterfaceMockRecorder) UpdateOne(ctx, filter, update interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, filter, update}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOne", reflect.TypeOf((*MockMongoCollectionInterface)(nil).UpdateOne), varargs...)
}

// MockMongoDatabaseInterface is a mock of MongoDatabaseInterface interface.
type MockMongoDatabaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoDatabaseInterfaceMockRecorder
}

// MockMongoDatabaseInterfaceMockRecorder is the mock recorder for MockMongoDatabaseInterface.
type MockMongoDatabaseInterfaceMockRecorder struct {
	mock *MockMongoDatabaseInterface
}

// NewMockMongoDatabaseInterface creates a new mock instance.
func NewMockMongoDatabaseInterface(ctrl *gomock.Controller) *MockMongoDatabaseInterface {
	mock := &MockMongoDatabaseInterface{ctrl: ctrl}
	mock.recorder = &MockMongoDatabaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoDatabaseInterface) EXPECT() *MockMongoDatabaseInterfaceMockRecorder {
	return m.recorder
}

// Collection mocks base method.
func (m *MockMongoDatabaseInterface) Collection(name string, opts ...*options.CollectionOptions) common.MongoCollectionInterface {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Collection", varargs...)
	ret0, _ := ret[0].(common.MongoCollectionInterface)
	return ret0
}

// Collection indicates an expected call of Collection.
func (mr *MockMongoDatabaseInterfaceMockRecorder) Collection(name interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collection", reflect.TypeOf((*MockMongoDatabaseInterface)(nil).Collection), varargs...)
}
